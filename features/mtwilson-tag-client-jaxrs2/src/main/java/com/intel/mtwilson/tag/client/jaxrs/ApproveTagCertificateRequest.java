//package com.intel.mtwilson.tag.client.jaxrs;
//
//import com.intel.dcsg.cpg.io.UUID;
//import com.intel.mtwilson.jaxrs2.client.MtWilsonClient;
//import java.net.URL;
//import java.util.Properties;
//import javax.ws.rs.client.Entity;
//import javax.ws.rs.core.MediaType;
//import javax.ws.rs.core.Response;
//import javax.ws.rs.core.Response.Status.Family;
//
///**
// * These resources are used to manage the approve tag certificate requests.
// * <pre>
// * The ApproveTagCertificateRequest is used to update the certificate request status to completed. 
// * The certificate request API would be used only if the certificates are created by an 
// * external CA. The request would contain the key-value pairs that needs to be added to the certificate
// * and stored in the Certificate request database of the host verification service in an encrypted format. 
// * </pre>
// * @author ssbangal
// */
//public class ApproveTagCertificateRequest extends MtWilsonClient {
//
//    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(ApproveTagCertificateRequest.class);
//
//    /**
//     * Constructor.
//     * 
//     * @param properties This java properties model must include server connection details for the API
//     * client initialization.
//     * <pre>
//     * mtwilson.api.url - Host Verification Service (HVS) base URL for accessing REST APIs
//     * 
//     * // basic authentication
//     * mtwilson.api.username - Username for API basic authentication with the HVS
//     * mtwilson.api.password - Password for API basic authentication with the HVS
//     * mtwilson.api.tls.policy.certificate.sha256 - sha256 vlaue of the TLS Certificate for API basic authentication with the HVS
//     * 
//     * <b>Example:</b>
//     * Properties properties = new Properties();
//     * properties.put(“mtwilson.api.url”, “https://server.com:port/mtwilson/v2”);
//     * 
//     * // basic authentication
//     * properties.put(“mtwilson.api.username”, “user”);
//     * properties.put(“mtwilson.api.password”, “*****”);
//     * properties.put("mtwilson.api.tls.policy.certificate.sha256", "ae8b50d9a45d1941d5486df204b9e05a433e3a5bc13445f48774af686d18dcfc");
//     * ApproveTagCertificateRequest client = new ApproveTagCertificateRequest(properties);
//     * </pre>
//     * @throws Exception 
//     */
//    public ApproveTagCertificateRequest(Properties properties) throws Exception {
//        super(properties);
//    }    
//        
//    /**
//     * Approve the tag certificate request. 
//     * <pre>
//     * This function provided the certificate request ID, and the certificate associated to it (provided
//     * by an external CA), stores the certificate details in the database and updates the request status to
//     * completed. Here it is assumed that the external CA would have added the required attributes in the
//     * certificate it generated.
//     * </pre>
//     * @param certificateRequestId Id of the certificate request that was created as a placeholder for external CA to
//     * generated the certificate. This parameter should be given the body of the POSt REST call.
//     * @param certificate Certificate generated by the external CA for the specified certificate request.
//     * This parameter should be given the body of the POSt REST call.
//     * @since ISecL 1.0
//     * @mtwRequiresPermissions tag_certificates:create,tag_certificate_requests:store
//     * @mtwContentTypeReturned JSON/XML/YAML
//     * @mtwMethodType POST
//     * @mtwSampleRestCall
//     * <pre>
//     * https://server.com:8443/mtwilson/v2/rpc/approve-tag-certificate-request
//     * Input: 
//     * {
//     *      "certificate_request_id":   "187ec902-c6c6-4dfb-adb4-f240099aa4b0",
//     *      "certificate"           :   "MIIO....ic="
//     * }
//     * </pre>
//     * @mtwSampleApiCall
//     * <pre>
//     *  ApproveTagCertificateRequest client = new ApproveTagCertificateRequest(properties);
//     *  client.approveTagCertificate("a6544ff4-6dc7-4c74-82be-578592e7e3ba",...);
//     * </pre>
//     */
//    public void approveTagCertificate(UUID certificateRequestId, byte[] certificate) {
//        log.debug("target: {}", getTarget().getUri().toString());
//        Response obj = getTarget().path("rpc/approve-tag-certificate-request").request().accept(MediaType.APPLICATION_JSON).post(Entity.json(certificateRequestId));
//        if( !obj.getStatusInfo().getFamily().equals(Family.SUCCESSFUL)) {
//            throw new IllegalStateException("Tag provisioning failed");
//        }
//    }
//        
//}
